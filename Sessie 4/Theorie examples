# Scripting
 
## Constants
Set-Variable MyConstant "ok" –Option readonly
$MyConstant
$MyConstant = "nok"
Remove-Variable MyConstant -Force
 
## Automatic resolving
$a = 1
Write-Host "The content of `$a is $a."
### In the parameter of a cmdlet
$proc = "powershell*"
Get-Process -Name $proc
 
## String Manipulation
$a = "A piece of text."
# Functions
$a.ToUpper()
$a.PadLeft(50)
$a.Trim()
$a.Trim("t", "h", " ")
 
$a.Contains("piece")
$a.CompareTo("B piece of text.")
$a.CompareTo("0 piece of text.")
$a.Trim(".").ToUpper().EndsWith("TEXT")
 
## Static vs instance methods
### the static way
if ([STRING]::Equals("b", "b")) {
    Write-Host "Equal" 
}
else {
    Write-Host "Not equal" 
}
 
#### the instance way
$var = "b"
if ($var.Equals("b")) {
    Write-Host "Equal" 
}
else {
    Write-Host "Not equal" 
}
 
[STRING]::Join(' ', 'A', 'B', 'C')
 
## References
$greeting = "hello"
$refToGreeting = [ref]$greeting
$refToGreeting
$refToGreeting.value = "Good day"
$greeting
 
## example reference within function 
function referencetest([ref]$cup, [ref]$plate) {
    $cup.Value = "coffee"
    $plate.Value = "muffin"
    return "Ready!"
}
 
$myCup = "empty"
$myPlate = "empty"
referencetest -cup ([ref]$myCup) -plate ([ref]$myPlate)
"In my cup: " + $myCup
"On my plate: " + $myPlate
 
## Arrays
$array = "one", "two", "three"
$array
$array[0]
 
$array = 1, "two", (1 / 3)
$array = @(1, "two", (1 / 3))
 
$array | Get-Member
Get-Member -InputObject $array
 
# multi dimensional array
$array = @( (1, 2, 3), ("four", "five", "six"), 7)
$array[0][2]
$array[1]
$array[1][1]
$array[2]
 
# Adding items to existing array
$array = 1, 2, 3
$array += 4
$array
$array.Add('four') #Does not work
 
 
## ArrayLists
 
$pathArray = $env:Path.Split(";")
$pathArray += "c:\myFolder"
[String]::Join(";", $pathArray)
 
$pathList = [System.Collections.ArrayList] $env:Path.Split(";")
$pathList.Add("C:\myfolder")
[String]::Join(";", $pathList.ToArray())
 
$env:Path + ";c:\myFolder"
 
## Hash tables
 
$Town = @{ Mol = ”2000”; Balen = “2490”; Kasterlee = ”2460”; }
$Town.Kasterlee
$Town | Get-Member
 
## converting hash table to object
$TownObject = [PSCustomObject]$Town
$TownObject.Kasterlee
$TownObject | Get-Member
 
## nicities
$String = “*=”
$LongString = $String * 20
"$LongString"
" nr of characters: " + $LongString.length
 
$x, $y = 8, 1
$x, $y = $y, $x
"X $x and Y $y after an elegant switch"
 
$a = 1, 2, 3, 4, 5
$b = $a * 3
 
"192.168.14.12" -replace "14", "15"
 
$What = “Process”
&("Get-$What") # call operator
Invoke-Expression ("Get-$What")
 
## Type operators
1000 / 3 -as [int]
1000 / 3 -is [int]
[int](1000 / 3) -is [int]
 
 
 
 
## Control Structures
 
### If statements
$i = 45
If ($i –lt 10) {
    “Smaller than 10”
} 
Elseif ($i -lt 50) {
    "Smaller than 50"
}
Elseif ($i -lt 100) {
    "Smaller than 100"
}
Else {
    “Larger than or equal to 100”
}
 
### Switch statements
$i = 5
Switch ($i) {
    default {
        "Default"
    }
    1 {
        "one"
    }
    5 {
        "five"
    }
    5 {
        "five B"
    }
    10 {
        "ten"
    }
}
 
 
 
 
### Foreach Loop
$procs = Get-Process notepad
foreach($p in $procs)
{
(($p.ProcessName.ToUpper()) + ($p.Id.ToString()))
}
 
 
 
### Other loops
 
$i=0
While ($i –lt 15)
{
$i = Get-Random -Minimum 1 -Maximum 20
Write-Host $i
}
 
While ($true){
    $i++
    $i
    if($i -gt 10){exit}
}
 
Do {
    $i++
    $i
} While ($i -lt 10)
 
$array = 1,2,3
for ($i = 0; $i -lt ($array.Count - 1); $i++) {
    $array[$i]
}
 
foreach ($item in $array) {
    $item
}
 
 
## Scope Examples
### private within function
Function privateExample {
    $Private:nr = 9
    Write-Host "Nr: $nr"
 
    &{ Write-Host "Nr: $nr" }
}
privateExample
Write-Host "Nr: $nr"
 
### local within function (default behaviour)
Function Example {
    Write-Host "Nr: $nr" # 9!
    $nr = 3
    Write-Host "Nr: $nr" # 3
}
$nr = 9
Example
Write-Host "Nr: $nr" # 9
 
### Global within function
Function Example {
    $Global:nr = 3
    Write-Host "Nr: $nr" # 3
}
Example
Write-Host "Nr: $nr" # 3